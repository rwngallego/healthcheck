openapi: 3.0.1
info:
  title: HealthCheck v1
  description: This app polls periodically the status of the services that belong
    to a user.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: http://localhost:8888/api/v1
tags:
  - name: service
    description: Services management
    externalDocs:
      description: More information
      url: https://github.com/rwngallego/healthcheck/blob/master/docs/design.md
  - name: user
    description: User management (DEMO only)
    externalDocs:
      description: More information
      url: https://github.com/rwngallego/healthcheck/blob/master/docs/design.md
paths:
  /users/{userId}/services:
    get:
      tags:
        - service
      summary: Get all the services
      description: Get a list of services and their status information, for the given user
      operationId: GetServices
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: offset
          schema:
            type: integer
          description: Number of items to skip
        - in: query
          name: limit
          schema:
            type: integer
          description: Number of items to return
        - in: query
          name: order_by
          schema:
            type: string
          description: Field to order by
        - in: query
          name: order_asc
          schema:
            type: string
            example: asc
          description: Ascending or descending order
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceStatus'
        400:
          description: Invalid ID
          content: {}
        404:
          description: Not found
          content: {}
    post:
      tags:
        - service
      summary: Create a new service for the user
      description: Create a new service
      operationId: CreateService
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The service information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: Validation error
          content: {}
  /users/{userId}/services/{serviceId}:
    put:
      tags:
        - service
      summary: Update service
      description: Update the service
      operationId: UpdateService
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
        - name: serviceId
          in: path
          description: Service ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The service information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: Validation error
          content: {}
    delete:
      tags:
        - service
      summary: Delete service
      description: Delete the service
      operationId: DeleteService
      parameters:
        - name: serviceId
          in: path
          description: Service ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: Invalid ID
          content: {}
        404:
          description: Not found
          content: {}
  /users:
    post:
      tags:
        - user
      summary: Create a new user (DEMO only)
      description: Create a new user (DEMO only, it doesn't implement validation and filtering)
      operationId: CreateUser
      requestBody:
        description: The user information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: Validation error
          content: {}
    get:
      tags:
        - user
      summary: Get all the users (DEMO only)
      description: Get a list of users (DEMO only, it doesn't implement pagination).
      operationId: GetUsers
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
components:
  schemas:
    Service:
      type: object
      properties:
        name:
          type: string
          description: Name of the service
        url:
          type: string
          description: Url of the service
    ServiceStatus:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of the service
        name:
          type: string
          description: Name of the service
        url:
          type: string
          description: Url of the service
        status:
          type: string
          description: Current status of the service
          enum:
            - FAIL
            - OK
          example: FAIL
        created_at:
          type: string
          description: Date in which the service was created
          format: date-time
        updated_at:
          type: string
          format: date-time
          description: The last time the service information was changed
    User:
      type: object
      properties:
        name:
          type: string
          description: Name of the user
    UserInformation:
      type: object
      properties:
        user_id:
          type: string
          description: User identifier
        name:
          type: string
          description: Name of the user
